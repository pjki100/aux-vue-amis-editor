/// <reference types="lodash" />
import { SnapshotIn, IAnyModelType, Instance } from 'mobx-state-tree';
import { IFormStore } from './form';
export declare const Column: import("mobx-state-tree").IModelType<{
    label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    value: import("mobx-state-tree").IType<any, any, any>;
    groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
    toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
    enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
    index: import("mobx-state-tree").IType<number | undefined, number, number>;
    rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
    breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    className: import("mobx-state-tree").ITypeUnion<any, any, any>;
}, {
    toggleToggle(): void;
    setToggled(value: boolean): void;
    setEnableSearch(value: boolean): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IColumn = Instance<typeof Column>;
export declare type SColumn = SnapshotIn<typeof Column>;
export declare const Row: import("mobx-state-tree").IModelType<{
    storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
    id: import("mobx-state-tree").ISimpleType<string>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    key: import("mobx-state-tree").ISimpleType<string>;
    pristine: import("mobx-state-tree").IType<any, any, any>;
    data: import("mobx-state-tree").IType<any, any, any>;
    rowSpans: import("mobx-state-tree").IType<any, any, any>;
    index: import("mobx-state-tree").ISimpleType<number>;
    newIndex: import("mobx-state-tree").ISimpleType<number>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
    depth: import("mobx-state-tree").ISimpleType<number>;
}, {
    readonly checked: boolean;
    readonly modified: boolean;
    getDataWithModifiedChilden(): any;
    readonly collapsed: boolean;
    readonly expanded: boolean;
    readonly moved: boolean;
    readonly locals: any;
    readonly checkable: boolean;
    readonly draggable: boolean;
} & {
    toggle(): void;
    toggleExpanded(): void;
    change(values: object, savePristine?: boolean): void;
    reset(): void;
    setCheckdisable(bool: boolean): void;
    setIsHover(value: boolean): void;
    replaceWith(data: any): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type IRow = Instance<typeof Row>;
export declare type SRow = SnapshotIn<typeof Row>;
export declare const TableStore: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").ISimpleType<string>;
    path: import("mobx-state-tree").IType<string | undefined, string, string>;
    storeType: import("mobx-state-tree").ISimpleType<string>;
    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
} & {
    hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
    pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
    drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
} & {
    columns: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    rows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    selectedRows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
    expandedRows: import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>;
    primaryField: import("mobx-state-tree").IType<string | undefined, string, string>;
    orderBy: import("mobx-state-tree").IType<string | undefined, string, string>;
    orderDir: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<"" | "desc" | "asc", "" | "desc" | "asc", "" | "desc" | "asc">, [undefined]>;
    draggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    dragging: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    selectable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    footable: import("mobx-state-tree").IType<any, any, any>;
    expandConfig: import("mobx-state-tree").IType<any, any, any>;
    isNested: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    columnsTogglable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<boolean | "auto", boolean | "auto", boolean | "auto">, [undefined]>;
    itemCheckableOn: import("mobx-state-tree").IType<string | undefined, string, string>;
    itemDraggableOn: import("mobx-state-tree").IType<string | undefined, string, string>;
    hideCheckToggler: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    combineNum: import("mobx-state-tree").IType<number | undefined, number, number>;
    combineFromIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
    formsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<any, any, any>>, [undefined]>;
    maxKeepItemSelectionLength: import("mobx-state-tree").IType<number | undefined, number, number>;
    keepItemSelectionOnPageChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    readonly parentStore: any;
    readonly __: any;
    readonly hasChildren: boolean;
    readonly children: any[];
} & {
    onChildStoreDispose(child: any): void;
    syncProps(props: any, prevProps: any, list?: string[]): void;
    dispose: (callback?: (() => void) | undefined) => void;
    addChildId: (id: string) => void;
    removeChildId: (id: string) => void;
} & {
    getValueByName(name: string, canAccessSuper?: boolean): any;
    getPristineValueByName(name: string): any;
} & {
    initData(data?: object, skipSetPristine?: boolean): void;
    reset(): void;
    updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
    changeValue(name: string, value: any, changePristine?: boolean | undefined, force?: boolean | undefined, otherModifier?: ((data: Object) => void) | undefined): void;
    setCurrentAction(action: object): void;
    openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDialog(result?: any): void;
    openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
    closeDrawer(result?: any): void;
} & {
    readonly columnsData: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly forms: {
        store: {
            id: string;
            path: string;
            storeType: string;
            disposed: boolean;
            parentId: string;
            childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
            hasRemoteData: boolean;
            data: any;
            initedAt: number;
            updatedAt: number;
            pristine: any;
            action: any;
            dialogOpen: boolean;
            dialogData: any;
            drawerOpen: boolean;
            drawerData: any;
            msg: string;
            error: boolean;
            fetching: boolean;
            saving: boolean;
            busying: boolean;
            checking: boolean;
            initializing: boolean;
            schema: any;
            schemaKey: string;
            inited: boolean;
            validated: boolean;
            submited: boolean;
            submiting: boolean;
            savedData: any;
            canAccessSuperData: boolean;
            persistData: string | boolean;
            restError: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            getValueByName(name: string, canAccessSuper?: boolean): any;
            getPristineValueByName(name: string): any;
        } & {
            initData(data?: object, skipSetPristine?: boolean): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
            changeValue(name: string, value: any, changePristine?: boolean | undefined, force?: boolean | undefined, otherModifier?: ((data: Object) => void) | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined, replace?: boolean) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            setHasRemoteData: () => void;
            saveRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly items: ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly directItems: ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string, canAccessSuperData?: boolean): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly validating: boolean;
            readonly isPristine: boolean;
            readonly modified: boolean;
            readonly persistKey: string;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined, replace?: boolean | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined, validateErrCb?: (() => void) | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: (string | {
                name: string;
                rules: {
                    [propName: string]: any;
                };
            })[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            syncOptions: import("lodash").DebouncedFunc<() => void>;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getLocalPersistData: () => void;
            setLocalPersistData: () => void;
            clearLocalPersistData: () => void;
            setPersistData: (value?: string) => void;
            clear: (cb?: ((data: any) => void) | undefined) => void;
            updateSavedData: () => void;
            setFormItemErrors: (errors: {
                [propName: string]: string;
            }, tag?: string) => void;
            getItemsByPath: (key: string) => any[] | null;
            setRestError: (errors: string[]) => void;
            addRestError: (msg: string, name?: string | string[] | undefined) => void;
            clearRestError: () => void;
            beforeDestroy(): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").ISimpleType<string>;
            path: import("mobx-state-tree").IType<string | undefined, string, string>;
            storeType: import("mobx-state-tree").ISimpleType<string>;
            disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
            childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        } & {
            hasRemoteData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
            data: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            initedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            updatedAt: import("mobx-state-tree").IType<number | undefined, number, number>;
            pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            action: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            dialogData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            drawerOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            drawerData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        } & {
            msg: import("mobx-state-tree").IType<string | undefined, string, string>;
            error: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            fetching: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            saving: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            busying: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            checking: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            initializing: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            schema: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
            schemaKey: import("mobx-state-tree").IType<string | undefined, string, string>;
        } & {
            inited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submited: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            submiting: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            savedData: import("mobx-state-tree").IType<any, any, any>;
            canAccessSuperData: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            persistData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<string | boolean, string | boolean, string | boolean>, [undefined]>;
            restError: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
        }, {
            readonly parentStore: any;
            readonly __: any;
            readonly hasChildren: boolean;
            readonly children: any[];
        } & {
            onChildStoreDispose(child: any): void;
            syncProps(props: any, prevProps: any, list?: string[]): void;
            dispose: (callback?: (() => void) | undefined) => void;
            addChildId: (id: string) => void;
            removeChildId: (id: string) => void;
        } & {
            getValueByName(name: string, canAccessSuper?: boolean): any;
            getPristineValueByName(name: string): any;
        } & {
            initData(data?: object, skipSetPristine?: boolean): void;
            reset(): void;
            updateData(data?: object, tag?: object | undefined, replace?: boolean | undefined): void;
            changeValue(name: string, value: any, changePristine?: boolean | undefined, force?: boolean | undefined, otherModifier?: ((data: Object) => void) | undefined): void;
            setCurrentAction(action: object): void;
            openDialog(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDialog(result?: any): void;
            openDrawer(ctx: any, additonal?: object | undefined, callback?: ((ret: any) => void) | undefined): void;
            closeDrawer(result?: any): void;
        } & {
            readonly loading: boolean;
        } & {
            markFetching: (fetching?: boolean) => void;
            markSaving: (saving?: boolean) => void;
            markBusying: (busying?: boolean) => void;
            fetchInitData: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            fetchData: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            reInitData: (data: object | undefined, replace?: boolean) => void;
            updateMessage: (msg?: string | undefined, error?: boolean) => void;
            clearMessage: () => void;
            setHasRemoteData: () => void;
            saveRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            fetchSchema: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            checkRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
        } & {
            readonly loading: boolean;
            readonly items: ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly directItems: ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly errors: {
                [propName: string]: string[];
            };
            getValueByName(name: string, canAccessSuperData?: boolean): any;
            getPristineValueByName(name: string): any;
            getItemById(id: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemByName(name: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            getItemsByName(name: string): ({
                id: string;
                path: string;
                storeType: string;
                disposed: boolean;
                parentId: string;
                childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                isFocused: boolean;
                type: string;
                label: string;
                unique: boolean;
                loading: boolean;
                required: boolean;
                tmpValue: any;
                emitedValue: any;
                rules: any;
                messages: any;
                errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                name: string;
                itemId: string;
                unsetValueOnInvisible: boolean;
                itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                validated: boolean;
                validating: boolean;
                multiple: boolean;
                delimiter: string;
                valueField: string;
                labelField: string;
                joinValues: boolean;
                extractValue: boolean;
                options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                expressionsInOptions: boolean;
                selectFirst: boolean;
                autoFill: any;
                clearValueOnHidden: boolean;
                validateApi: any;
                selectedOptions: any;
                filteredOptions: any;
                dialogSchema: any;
                dialogOpen: boolean;
                dialogData: any;
                resetValue: any;
                validateOnChange: boolean;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                id: import("mobx-state-tree").ISimpleType<string>;
                path: import("mobx-state-tree").IType<string | undefined, string, string>;
                storeType: import("mobx-state-tree").ISimpleType<string>;
                disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
            } & {
                isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                type: import("mobx-state-tree").IType<string | undefined, string, string>;
                label: import("mobx-state-tree").IType<string | undefined, string, string>;
                unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                tmpValue: import("mobx-state-tree").IType<any, any, any>;
                emitedValue: import("mobx-state-tree").IType<any, any, any>;
                rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                    msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                    tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                    rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                name: import("mobx-state-tree").ISimpleType<string>;
                itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                autoFill: import("mobx-state-tree").IType<any, any, any>;
                clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                dialogData: import("mobx-state-tree").IType<any, any, any>;
                resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
            }, {
                readonly parentStore: any;
                readonly __: any;
                readonly hasChildren: boolean;
                readonly children: any[];
            } & {
                onChildStoreDispose(child: any): void;
                syncProps(props: any, prevProps: any, list?: string[]): void;
                dispose: (callback?: (() => void) | undefined) => void;
                addChildId: (id: string) => void;
                removeChildId: (id: string) => void;
            } & {
                readonly subFormItems: any;
                readonly form: any;
                readonly value: any;
                readonly prinstine: any;
                readonly errors: string[];
                readonly valid: boolean;
                readonly errClassNames: string;
                readonly lastSelectValue: string;
                getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
            } & {
                focus: () => void;
                blur: () => void;
                config: ({ required, unique, value, rules, messages, delimiter, multiple, valueField, labelField, joinValues, extractValue, type, id, selectFirst, autoFill, clearValueOnHidden, validateApi, maxLength, minLength, validateOnChange, label }: {
                    required?: boolean | undefined;
                    unique?: boolean | undefined;
                    value?: any;
                    rules?: string | {
                        [propName: string]: any;
                    } | undefined;
                    messages?: {
                        [propName: string]: string;
                    } | undefined;
                    multiple?: boolean | undefined;
                    delimiter?: string | undefined;
                    valueField?: string | undefined;
                    labelField?: string | undefined;
                    joinValues?: boolean | undefined;
                    extractValue?: boolean | undefined;
                    type?: string | undefined;
                    id?: string | undefined;
                    selectFirst?: boolean | undefined;
                    autoFill?: any;
                    clearValueOnHidden?: boolean | undefined;
                    validateApi?: boolean | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    validateOnChange?: boolean | undefined;
                    label?: string | undefined;
                }) => void;
                validate: (data: Object, hook?: any, customRules?: {
                    [propName: string]: any;
                } | undefined) => Promise<boolean>;
                setError: (msg: string | string[], tag?: string) => void;
                addError: (msg: string | (string | {
                    msg: string;
                    rule: string;
                })[], tag?: string) => void;
                clearError: (tag?: string | undefined) => void;
                setOptions: (options: object[], onChange?: ((value: any) => void) | undefined, data?: Object | undefined) => void;
                loadOptions: (api: import("..").Api, data?: object | undefined, config?: (import("..").fetchOptions & {
                    extendsOptions?: boolean | undefined;
                }) | undefined, clearValue?: boolean | undefined, onChange?: ((value: any) => void) | undefined, setErrorFlag?: boolean | undefined) => Promise<import("..").Payload | null>;
                deferLoadOptions: (option: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                deferLoadLeftOptions: (option: any, leftOptions: any, api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<import("..").Payload | null>;
                expandTreeOptions: (nodePathArr: any[], api: import("..").Api, data?: object | undefined, config?: import("..").fetchOptions | undefined) => Promise<void | import("..").Payload | null>;
                syncOptions: (originOptions?: any[] | undefined, data?: Object | undefined) => void;
                setLoading: (value: boolean) => void;
                setSubStore: (store: any) => void;
                getSubStore: () => any;
                reset: (keepErrors?: boolean) => void;
                openDialog: (schema: any, data: any, callback?: ((ret?: any) => void) | undefined) => void;
                closeDialog: (result?: any) => void;
                changeTmpValue: (value: any) => void;
                changeEmitedValue: (value: any) => void;
                addSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                removeSubFormItem: (item: {
                    id: string;
                    path: string;
                    storeType: string;
                    disposed: boolean;
                    parentId: string;
                    childrenIds: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    isFocused: boolean;
                    type: string;
                    label: string;
                    unique: boolean;
                    loading: boolean;
                    required: boolean;
                    tmpValue: any;
                    emitedValue: any;
                    rules: any;
                    messages: any;
                    errorData: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>>;
                    name: string;
                    itemId: string;
                    unsetValueOnInvisible: boolean;
                    itemsRef: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").ISimpleType<string>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>>;
                    validated: boolean;
                    validating: boolean;
                    multiple: boolean;
                    delimiter: string;
                    valueField: string;
                    labelField: string;
                    joinValues: boolean;
                    extractValue: boolean;
                    options: any[] & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>>;
                    expressionsInOptions: boolean;
                    selectFirst: boolean;
                    autoFill: any;
                    clearValueOnHidden: boolean;
                    validateApi: any;
                    selectedOptions: any;
                    filteredOptions: any;
                    dialogSchema: any;
                    dialogOpen: boolean;
                    dialogData: any;
                    resetValue: any;
                    validateOnChange: boolean;
                } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                    id: import("mobx-state-tree").ISimpleType<string>;
                    path: import("mobx-state-tree").IType<string | undefined, string, string>;
                    storeType: import("mobx-state-tree").ISimpleType<string>;
                    disposed: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    childrenIds: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                } & {
                    isFocused: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    type: import("mobx-state-tree").IType<string | undefined, string, string>;
                    label: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unique: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    loading: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    required: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    tmpValue: import("mobx-state-tree").IType<any, any, any>;
                    emitedValue: import("mobx-state-tree").IType<any, any, any>;
                    rules: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    messages: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    errorData: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                        msg: import("mobx-state-tree").IType<string | undefined, string, string>;
                        tag: import("mobx-state-tree").IType<string | undefined, string, string>;
                        rule: import("mobx-state-tree").IType<string | undefined, string, string>;
                    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>, [undefined]>;
                    name: import("mobx-state-tree").ISimpleType<string>;
                    itemId: import("mobx-state-tree").IType<string | undefined, string, string>;
                    unsetValueOnInvisible: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    itemsRef: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").ISimpleType<string>>, [undefined]>;
                    validated: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validating: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    multiple: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    delimiter: import("mobx-state-tree").IType<string | undefined, string, string>;
                    valueField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    labelField: import("mobx-state-tree").IType<string | undefined, string, string>;
                    joinValues: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    extractValue: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    options: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any[], any[], any[]>, [undefined]>;
                    expressionsInOptions: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    selectFirst: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    autoFill: import("mobx-state-tree").IType<any, any, any>;
                    clearValueOnHidden: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    validateApi: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    selectedOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    filteredOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    dialogSchema: import("mobx-state-tree").IType<any, any, any>;
                    dialogOpen: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                    dialogData: import("mobx-state-tree").IType<any, any, any>;
                    resetValue: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
                    validateOnChange: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
                }, {
                    readonly parentStore: any;
                    readonly __: any;
                    readonly hasChildren: boolean;
                    readonly children: any[];
                } & {
                    onChildStoreDispose(child: any): void;
                    syncProps(props: any, prevProps: any, list?: string[]): void;
                    dispose: (callback?: (() => void) | undefined) => void;
                    addChildId: (id: string) => void;
                    removeChildId: (id: string) => void;
                } & {
                    readonly subFormItems: any;
                    readonly form: any;
                    readonly value: any;
                    readonly prinstine: any;
                    readonly errors: string[];
                    readonly valid: boolean;
                    readonly errClassNames: string;
                    readonly lastSelectValue: string;
                    getSelectedOptions: (value?: any, nodeValueArray?: any[] | undefined) => any[];
                } & any, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) => void;
                loadAutoUpdateData: (api: import("..").Api, data?: object | undefined, silent?: boolean | undefined) => Promise<import("..").Payload>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
            readonly valid: boolean;
            readonly validating: boolean;
            readonly isPristine: boolean;
            readonly modified: boolean;
            readonly persistKey: string;
        } & {
            setInited: (value: boolean) => void;
            setValues: (values: object, tag?: object | undefined, replace?: boolean | undefined) => void;
            setValueByName: (name: string, value: any, isPristine?: boolean, force?: boolean) => void;
            trimValues: () => void;
            submit: (fn?: ((values: object) => Promise<any>) | undefined, hooks?: (() => Promise<any>)[] | undefined, failedMessage?: string | undefined, validateErrCb?: (() => void) | undefined) => Promise<any>;
            validate: (hooks?: (() => Promise<any>)[] | undefined, forceValidate?: boolean | undefined) => Promise<boolean>;
            validateFields: (fields: (string | {
                name: string;
                rules: {
                    [propName: string]: any;
                };
            })[]) => Promise<boolean>;
            clearErrors: () => void;
            saveRemote: (api: import("..").Api, data?: object | undefined, options?: import("..").fetchOptions | undefined) => Promise<any>;
            reset: (cb?: ((data: any) => void) | undefined, resetData?: boolean) => void;
            syncOptions: import("lodash").DebouncedFunc<() => void>;
            setCanAccessSuperData: (value?: boolean) => void;
            deleteValueByName: (name: string) => void;
            getLocalPersistData: () => void;
            setLocalPersistData: () => void;
            clearLocalPersistData: () => void;
            setPersistData: (value?: string) => void;
            clear: (cb?: ((data: any) => void) | undefined) => void;
            updateSavedData: () => void;
            setFormItemErrors: (errors: {
                [propName: string]: string;
            }, tag?: string) => void;
            getItemsByPath: (key: string) => any[] | null;
            setRestError: (errors: string[]) => void;
            addRestError: (msg: string, name?: string | string[] | undefined) => void;
            clearRestError: () => void;
            beforeDestroy(): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        rowIndex: any;
    }[];
    readonly searchableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly activedSearchableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    /** 导出excel列（包含breakpoint列） */
    readonly exportColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly filteredColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly footableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly leftFixedColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly rightFixedColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly toggableColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly activeToggaleColumns: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        isPrimary: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isPrimary: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        toggleToggle(): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly someChecked: boolean;
    readonly allChecked: boolean;
    isSelected: (row: IRow) => boolean;
    readonly allExpanded: boolean;
    isExpanded: (row: IRow) => boolean;
    readonly toggable: boolean;
    readonly modified: number;
    readonly modifiedRows: ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly unSelectedRows: ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly checkableRows: ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly expandableRows: ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    readonly moved: number;
    readonly movedRows: (import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }>> | import("mobx-state-tree").ModelSnapshotType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }> | ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>))[];
    readonly hoverRow: ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
    readonly disabledHeadCheckbox: boolean;
    readonly firstToggledColumnIndex: number | null;
    getData: (superData: any) => any;
    readonly columnGroup: {
        rowSpan: number;
        label: any;
        index: number;
        colSpan: number;
        has: Array<any>;
    }[];
    getRowById(id: string): import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }>> | import("mobx-state-tree").ModelSnapshotType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }> | ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | null;
    getItemsByName(name: string): any;
    hasColumnHidden(): boolean;
    getExpandedRows(): ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
} & {
    update: (config: Partial<STableStore>) => void;
    updateColumns: (columns: Array<SColumn>) => void;
    initRows: (rows: Array<any>, getEntryId?: ((entry: any, index: number) => string) | undefined, reUseRow?: boolean) => void;
    updateSelected: (selected: Array<any>, valueField?: string) => void;
    toggleAll: () => void;
    getSelectedRows: () => ({
        storeType: string;
        id: string;
        parentId: string;
        key: string;
        pristine: any;
        data: any;
        rowSpans: any;
        index: number;
        newIndex: number;
        path: string;
        expandable: boolean;
        checkdisable: boolean;
        isHover: boolean;
        children: import("mobx-state-tree").IMSTArray<IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>>;
        depth: number;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        storeType: import("mobx-state-tree").IType<string | undefined, string, string>;
        id: import("mobx-state-tree").ISimpleType<string>;
        parentId: import("mobx-state-tree").IType<string | undefined, string, string>;
        key: import("mobx-state-tree").ISimpleType<string>;
        pristine: import("mobx-state-tree").IType<any, any, any>;
        data: import("mobx-state-tree").IType<any, any, any>;
        rowSpans: import("mobx-state-tree").IType<any, any, any>;
        index: import("mobx-state-tree").ISimpleType<number>;
        newIndex: import("mobx-state-tree").ISimpleType<number>;
        path: import("mobx-state-tree").IType<string | undefined, string, string>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isHover: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        children: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<IAnyModelType>, [undefined]>;
        depth: import("mobx-state-tree").ISimpleType<number>;
    }, {
        readonly checked: boolean;
        readonly modified: boolean;
        getDataWithModifiedChilden(): any;
        readonly collapsed: boolean;
        readonly expanded: boolean;
        readonly moved: boolean;
        readonly locals: any;
        readonly checkable: boolean;
        readonly draggable: boolean;
    } & {
        toggle(): void;
        toggleExpanded(): void;
        change(values: object, savePristine?: boolean): void;
        reset(): void;
        setCheckdisable(bool: boolean): void;
        setIsHover(value: boolean): void;
        replaceWith(data: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[];
    toggle: (row: IRow) => void;
    toggleShift: (row: IRow) => void;
    toggleExpandAll: () => void;
    toggleExpanded: (row: IRow) => void;
    collapseAllAtDepth: (depth: number) => void;
    clear: () => void;
    setOrderByInfo: (key: string, direction: 'asc' | 'desc' | '') => void;
    reset: () => void;
    toggleDragging: () => void;
    stopDragging: () => void;
    exchange: (fromIndex: number, toIndex: number, item?: IRow) => void;
    addForm: (form: IFormStore, rowIndex: number) => void;
    toggleAllColumns: () => void;
    persistSaveToggledColumns: () => void;
    afterCreate(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export declare type ITableStore = Instance<typeof TableStore>;
export declare type STableStore = SnapshotIn<typeof TableStore>;
